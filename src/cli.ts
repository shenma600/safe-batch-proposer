import fs from 'fs'; import { parse } from 'csv-parse/sync'; import yargs from 'yargs'; import { hideBin } from 'yargs/helpers'; import { ethers } from 'ethers'; import ERC20 from './abis/erc20.json' assert { type:'json' }; import { buildBatch, SafeTx } from './builder'; function save(batch:any){ fs.writeFileSync('safe_batch.json', JSON.stringify(batch,null,2)); console.log('Wrote safe_batch.json'); }
 yargs(hideBin(process.argv)).command('erc20-csv <csv>','Batch transfers from CSV', y=>y.positional('csv',{type:'string'}).option('safe',{type:'string',demandOption:true}).option('nonce',{type:'number',demandOption:true}).option('chain',{type:'number',demandOption:true}), argv=>{ const rows=parse(fs.readFileSync(argv.csv as string,'utf8'),{columns:true,skip_empty_lines:true,trim:true}); const iface=new ethers.Interface(ERC20 as any); const txs:SafeTx[]=rows.map((r:any)=>({to:r.token, value:'0', data: iface.encodeFunctionData('transfer',[r.to, r.amount]), operation:0})); save(buildBatch(txs,{safe:argv.safe as string, nonce:argv.nonce as number, chainId:argv.chain as number})); }).command('approve','Single approve', y=>y.option('token',{type:'string',demandOption:true}).option('spender',{type:'string',demandOption:true}).option('amount',{type:'string',demandOption:true}).option('safe',{type:'string',demandOption:true}).option('nonce',{type:'number',demandOption:true}).option('chain',{type:'number',demandOption:true}), argv=>{ const iface=new ethers.Interface(ERC20 as any); const data=iface.encodeFunctionData('approve',[argv.spender, argv.amount]); const txs:SafeTx=[{to:argv.token as string,value:'0',data,operation:0}]; save(buildBatch(txs,{safe:argv.safe as string, nonce:argv.nonce as number, chainId:argv.chain as number})); }).command('raw-call','Arbitrary call', y=>y.option('abi',{type:'string',demandOption:true}).option('addr',{type:'string',demandOption:true}).option('fn',{type:'string',demandOption:true}).option('args',{type:'string',demandOption:true}).option('safe',{type:'string',demandOption:true}).option('nonce',{type:'number',demandOption:true}).option('chain',{type:'number',demandOption:true}), argv=>{ const abi=JSON.parse(fs.readFileSync(argv.abi as string,'utf8')); const iface=new ethers.Interface(abi); const data=iface.encodeFunctionData(argv.fn as string, JSON.parse(argv.args as string)); const txs:SafeTx=[{to:argv.addr as string, value:'0', data, operation:0}]; save(buildBatch(txs,{safe:argv.safe as string, nonce:argv.nonce as number, chainId:argv.chain as number})); }).demandCommand(1).help().parse();
